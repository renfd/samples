Runner = function()
{
    Runner.superclass.constructor.call(this);

    // Global pointers to assets and gamescreen
    this.gameAssets = null;
    this.gameScreen = null;

    // Final stat vars
    this.finalScore = 0; 
    this.finalDistance = 0;                                        
    this.finalCoins = 0;

    this.SetupAssets();
    this.SetupFont();

    // Start game on start screen
    TGE.FirstGameWindow = StartScreen;

    return this;
};


Runner.prototype = 
{
    SetupAssets : function()
    {
        this.gameAssets = new Assets();

        // Send asset list to the asset manager for loading and add the images required by TGS to the asset list     
        this.assetManager.addAssets("required", this.gameAssets.locations);
        TGS.AddRequiredImagesToAssetList("required");
    },

    SetupFont : function()
    {
        var myFont = new Font();
        myFont.fontFamily = "myFont";
        myFont.src = "assets/fonts/Geo.ttf";
    },

    SetGameScreen : function(param)
    {
        this.gameScreen = param;
    },

    GetGameScreen : function()
    {
        return this.gameScreen;
    },

    GetAssets : function()
    {
        return this.gameAssets;
    },

    SetFinalStats : function(distance, coins) 
    {
        this.finalDistance = distance;
        this.finalCoins = coins;
        if (coins == 0) this.finalScore = distance;
        else this.finalScore = coins * distance;
    },

    GetFinalStats : function()
    {
        var finalStats = {
            finalScore: this.finalScore, 
            finalDistance: this.finalDistance,
            finalCoins: this.finalCoins
        };
        return finalStats;
    },

    PlayAudio : function(audioType) 
    {    
        var audio_settings = this.gameAssets.soundSettings[audioType];

        this.audioManager.Play({
            id:    audio_settings.id,
            loop:  audio_settings.loop,
        });

    },

    PauseAudio : function(audioType) 
    {
        var audio_settings = this.gameAssets.soundSettings[audioType];

        this.audioManager.Pause({
            id:    audio_settings.id
        });

    },

    GetMouseDown : function() { return TGE.Game.GetInstance().isMouseDown(); },

    SwitchScreens : function(currentScreen, nextScreen) 
    {

        currentScreen.transitionToWindow({
            windowClass:  nextScreen,
            fadeTime: 1
        });
    },
}

extend(Runner,TGE.Game);

