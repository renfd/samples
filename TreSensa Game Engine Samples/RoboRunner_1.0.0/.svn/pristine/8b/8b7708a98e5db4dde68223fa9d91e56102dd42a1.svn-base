MovingObstacle = function()
{
    MovingObstacle.superclass.constructor.call(this);

	// Movement settings
	this.mBobAmplitude    = 0;
	this.mBobFrequency    = 0;
	this.mHorizontalSpeed = 0;
	this.hack_num   = 0;
	this.mTriggered = false; 

	// Pointers to Game constructor, Game assets, and the game screen
	this.gGame   	= TGE.Game.GetInstance();
	this.assets 	= this.gGame.GetAssets();
	this.gameScreen = this.gGame.GetGameScreen();

	// Destroy on screen exit
	this.cullToViewport(false, false, false, true);

	this.useWorldPosition(true);

	// Adds update event listener which calls updateMovingObstacle every frame
	this.addEventListener("update", this.updateMovingObstacle.bind(this));
}

MovingObstacle.prototype = {

	/** 
		SETUP FUNCTION
		called when new MovingObstacle is created in GameScreen
	*/
	setupMovingObstacle : function(params) 
	{
		// Get settings
		var settings = this.assets.movingObstSettings[params.type];
		params.image          = settings.image;
		this.mHorizontalSpeed = settings.speed;
		this.mBobAmplitude    = settings.bobAmplitude;
		this.mBobFrequency    = settings.bobFrequency;
		
		params.worldX = this.findStartingPosition(params.startingPos);

		// Send any altered params back
		MovingObstacle.superclass.setup.call(this,params);

		return this;
	},

	/**
		UPDATE FUNCTION 
		called every frame by an event listener
		moves obstacle up/down, then detects collisions between moving obstacle and player
	*/
	updateMovingObstacle : function() {
		this.updatePosition();
		this.detectCollisions();
	},







	findStartingPosition: function(startingPos) 
	{
    	var hack_extraTime   = this.gameScreen.width/this.gameScreen.getPlayer().mHorizontalSpeed;
		var finalStartingPos = startingPos + hack_extraTime * this.mHorizontalSpeed;
		return finalStartingPos;
	},

	updatePosition : function() 
	{
		this.hack_num += 0.04;
		this.worldY   += Math.sin(this.hack_num * this.mBobFrequency) * this.mBobAmplitude;
		this.worldX   -= this.mHorizontalSpeed;
	},
	
	detectCollisions : function() 
	{
		var player = this.gameScreen.getPlayer();
		
		var playerBounds   = player.getBounds();
    	var obstacleBounds = this.getBounds();
		var obstacleBuffer = 0.7;
		var playerBuffer   = 0.5;

		if (!this.mTriggered && obstacleBounds.intersects(playerBounds, obstacleBuffer, playerBuffer)) {
			this.mTriggered = true; 
			player.mStopped = true;
			this.gameScreen.playerHitObstacle();
			this.markForRemoval();
		}
	},

}

extend(MovingObstacle, TGE.Sprite); 