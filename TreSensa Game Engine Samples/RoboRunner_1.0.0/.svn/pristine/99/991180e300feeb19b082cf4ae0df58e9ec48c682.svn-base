Player = function() {

	Player.superclass.constructor.call(this);
	
	// Movement settings
	this.mGroundHeight    = 0;
	this.mHorizontalSpeed = 0;
	this.mVerticalSpeed   = 0;
	this.mFallSpeed  = 0;
	this.mBoostSpeed = 0;
	this.mStopped    = false;
	
	// Animation settings
	this.mCurrentAnim = null;
	this.mAnimArray   = [];

	// Pointers to Game constructor, Game assets, and the game screen
	this.gGame   	 = TGE.Game.GetInstance();
	this.gAssets 	 = this.gGame.GetAssets();
	this.gGameScreen = this.gGame.GetGameScreen();
	
	// Adds update event listener which calls updatePlayer every frame
	this.addEventListener("update", this.updatePlayer.bind(this));


	this.useWorldPosition(true);
	return this;
}

Player.prototype = {


	setupPlayer : function(params) 
	{
		this.createSpriteSheets();

		// start player out running
		this.playAnimation("run");		

		// Send any altered params back
		Player.superclass.setup.call(this, params);
		return this;
	},

	updatePlayer : function()
	{
		this.updateAnimation();

		if (!this.mStopped)
		{
			this.updateVerticalPosition();
			this.updateHorizontalPosition();
		}
	},






	
	//creates player's spritesheets using the specs in Assets.js
	createSpriteSheets : function()
	{
		for (var type in this.gAssets.playerSettings)
		{
			var settings = this.gAssets.playerSettings[type];

			this.mAnimArray[type] = new TGE.SpriteSheetAnimation().setup({
				looping: 	  true,
				visible: 	  false,
				image: 		  settings.image,
				rows: 		  settings.rows,
				columns: 	  settings.columns,
				totalFrames:  settings.totalFrames,
				fps: 		  settings.fps,
			});

			this.addChild(this.mAnimArray[type]);
		}
	},

	updateVerticalPosition : function() 
	{
	    // Add boost
	    if (this.gGame.GetMouseDown())  this.mVerticalSpeed = this.mBoostSpeed;  
	    
	    // Add gravity and cap it off at a certain point
	    else {
	    	this.mVerticalSpeed += this.mFallSpeed;
	    	if (this.mVerticalSpeed < this.mFallSpeed * 5) this.mVerticalSpeed = this.mFallSpeed * 5;
	    }						

	    // move player vertically
		this.worldY += this.mVerticalSpeed;

	    // Constrain player between ground and cieling
	    if 	(this.worldY < this.mGroundHeight)  this.worldY = this.mGroundHeight;
	    else if (this.worldY < 0) 				this.worldY = 0;
	},

	updateHorizontalPosition : function() 
	{
		//move player horizontally
		this.worldX += this.mHorizontalSpeed;

		// Award the distance points
	    this.gGameScreen.awardDistance(this.mHorizontalSpeed);
	},

	updateAnimation : function()
	{
		if (this.mStopped) this.playAnimation("fall");

		else if (this.worldY == this.mGroundHeight) this.playAnimation("run");

		else {
			if (this.gGame.GetMouseDown()) this.playAnimation("fly");
			else this.playAnimation("fall");
	   	}
	},

	playAnimation : function(name) 
	{
	    // If it's already started playing, don't start it again
	    if (this.mCurrentAnim == this.mAnimArray[name]) return;
		
		// Stop playing old animation if there is one
		if (this.mCurrentAnim != null) {
			this.mCurrentAnim.visible = false;
			this.mCurrentAnim.gotoAndStop(0);
		}
		
		// Start playing next animation
		this.mCurrentAnim = this.mAnimArray[name];
		this.mCurrentAnim.visible = true;
		this.mCurrentAnim.gotoAndPlay(0);
	},


	setSpeed : function(speed) {
		this.mHorizontalSpeed = speed * this.gGameScreen.width;
	},
	
	setFallSpeed : function(fallSpeed) {
		this.mFallSpeed = -fallSpeed * this.gGameScreen.height;
	},
	
	setBoostSpeed : function(boostSpeed) {
		this.mBoostSpeed = boostSpeed * this.gGameScreen.height;
	},

	setGroundHeight : function(groundHeight) {
		this.mGroundHeight = groundHeight;
	},
	
	
}

extend(Player, TGE.DisplayObjectContainer); 