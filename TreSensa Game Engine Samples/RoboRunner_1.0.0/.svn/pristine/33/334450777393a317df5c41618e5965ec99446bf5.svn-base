StationaryObstacle = function() {

	StationaryObstacle.superclass.constructor.call(this);

	// Pointers to Game constructor, Game assets, and the game screen
	this.gGame   	= TGE.Game.GetInstance();
	this.gAssets 	= this.gGame.GetAssets();
	this.gGameScreen = this.gGame.GetGameScreen();

	// Destroy on screen exit
	this.cullToViewport(false, false, false, true);

	this.useWorldPosition(true);

	// Adds update event listener which calls updateStationaryObstacle every frame
	this.addEventListener("update", this.updateStationaryObstacle.bind(this));

	return this;
}

StationaryObstacle.prototype = {


	setupStationaryObstacle : function(params) 
	{
		// Get settings
		var settings = this.gAssets.stationaryObstSettings[params.type];
		params.image  = settings.image;
		params.worldY = settings.yPos;

		// Send any altered params back
		StationaryObstacle.superclass.setup.call(this, params);

		return this;
	},
	
	updateStationaryObstacle : function()
	{
		this.detectCollisions();
	},







	detectCollisions : function() 
	{
		var player = this.gGameScreen.getPlayer();

		var obstacleBuffer = 0.7;
		var playerBuffer   = 0.7;
		var playerBounds   = player.getBounds();
		var obstacleBounds = this.getBounds();

		if (obstacleBounds.intersects(playerBounds, obstacleBuffer, playerBuffer)) {
			this.gGameScreen.playerHitObstacle();
			player.mStopped = true;
			this.markForRemoval();	
		}	
	}

}

extend(StationaryObstacle, TGE.Sprite);